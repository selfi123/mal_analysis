import os
import pefile
import yara
import magic
from capstone import *
from capstone.x86 import *
import hashlib
import requests
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
import json
from datetime import datetime

class MalwareAnalyzer:
    def __init__(self):
        self.console = Console()
        self.rules = self._load_yara_rules()
        self.vt_api_key = None  # VirusTotal API key
        
    def _load_yara_rules(self):
        """Load YARA rules from the rules directory"""
        try:
            rules = yara.compile(filepath='resources/rules/index.yar')
            return rules
        except Exception as e:
            self.console.print(f"[red]Error loading YARA rules: {e}[/red]")
            return None

    def analyze_file(self, file_path):
        """Main analysis function"""
        if not os.path.exists(file_path):
            self.console.print(f"[red]File not found: {file_path}[/red]")
            return

        self.console.print(Panel.fit(f"Analyzing file: {file_path}"))
        
        # Basic file information
        file_info = self._get_file_info(file_path)
        self._display_file_info(file_info)
        
        # PE Analysis
        if self._is_pe_file(file_path):
            pe_info = self._analyze_pe(file_path)
            self._display_pe_info(pe_info)
        
        # YARA Analysis
        yara_matches = self._scan_with_yara(file_path)
        self._display_yara_results(yara_matches)
        
        # String Analysis
        strings = self._extract_strings(file_path)
        self._display_strings(strings)
        
        # VirusTotal Check
        if self.vt_api_key:
            vt_results = self._check_virustotal(file_path)
            self._display_virustotal_results(vt_results)

    def _get_file_info(self, file_path):
        """Get basic file information"""
        file_info = {
            'size': os.path.getsize(file_path),
            'md5': self._calculate_md5(file_path),
            'sha256': self._calculate_sha256(file_path),
            'file_type': magic.from_file(file_path),
            'created': datetime.fromtimestamp(os.path.getctime(file_path)),
            'modified': datetime.fromtimestamp(os.path.getmtime(file_path))
        }
        return file_info

    def _analyze_pe(self, file_path):
        """Analyze PE file"""
        try:
            pe = pefile.PE(file_path)
            pe_info = {
                'entry_point': pe.OPTIONAL_HEADER.AddressOfEntryPoint,
                'sections': len(pe.sections),
                'imports': len(pe.DIRECTORY_ENTRY_IMPORT),
                'exports': len(pe.DIRECTORY_ENTRY_EXPORT.symbols) if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT') else 0,
                'suspicious_imports': self._check_suspicious_imports(pe)
            }
            return pe_info
        except Exception as e:
            self.console.print(f"[red]Error analyzing PE file: {e}[/red]")
            return None

    def _scan_with_yara(self, file_path):
        """Scan file with YARA rules"""
        try:
            matches = self.rules.match(file_path)
            return matches
        except Exception as e:
            self.console.print(f"[red]Error scanning with YARA: {e}[/red]")
            return []

    def _extract_strings(self, file_path):
        """Extract strings from file"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
            strings = []
            current_string = ""
            for byte in content:
                if 32 <= byte <= 126:
                    current_string += chr(byte)
                else:
                    if len(current_string) >= 4:
                        strings.append(current_string)
                    current_string = ""
            return strings
        except Exception as e:
            self.console.print(f"[red]Error extracting strings: {e}[/red]")
            return []

    def _check_virustotal(self, file_path):
        """Check file with VirusTotal"""
        if not self.vt_api_key:
            return None
            
        try:
            url = 'https://www.virustotal.com/vtapi/v2/file/scan'
            params = {'apikey': self.vt_api_key}
            files = {'file': (os.path.basename(file_path), open(file_path, 'rb'))}
            response = requests.post(url, files=files, params=params)
            return response.json()
        except Exception as e:
            self.console.print(f"[red]Error checking VirusTotal: {e}[/red]")
            return None

    def _display_file_info(self, file_info):
        """Display file information"""
        table = Table(title="File Information")
        table.add_column("Property", style="cyan")
        table.add_column("Value", style="green")
        
        for key, value in file_info.items():
            table.add_row(key, str(value))
        
        self.console.print(table)

    def _display_pe_info(self, pe_info):
        """Display PE file information"""
        if not pe_info:
            return
            
        table = Table(title="PE File Analysis")
        table.add_column("Property", style="cyan")
        table.add_column("Value", style="green")
        
        for key, value in pe_info.items():
            table.add_row(key, str(value))
        
        self.console.print(table)

    def _display_yara_results(self, matches):
        """Display YARA scan results"""
        if not matches:
            self.console.print("[yellow]No YARA rule matches found[/yellow]")
            return
            
        table = Table(title="YARA Rule Matches")
        table.add_column("Rule", style="cyan")
        table.add_column("Description", style="green")
        
        for match in matches:
            table.add_row(match.rule, match.meta.get('description', 'No description'))
        
        self.console.print(table)

    def _display_strings(self, strings):
        """Display extracted strings"""
        if not strings:
            return
            
        table = Table(title="Extracted Strings")
        table.add_column("String", style="cyan")
        
        for string in strings[:50]:  # Show first 50 strings
            table.add_row(string)
        
        self.console.print(table)

    def _display_virustotal_results(self, results):
        """Display VirusTotal results"""
        if not results:
            return
            
        table = Table(title="VirusTotal Results")
        table.add_column("Property", style="cyan")
        table.add_column("Value", style="green")
        
        for key, value in results.items():
            table.add_row(key, str(value))
        
        self.console.print(table)

    def _calculate_md5(self, file_path):
        """Calculate MD5 hash"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    def _calculate_sha256(self, file_path):
        """Calculate SHA256 hash"""
        hash_sha256 = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_sha256.update(chunk)
        return hash_sha256.hexdigest()

    def _is_pe_file(self, file_path):
        """Check if file is a PE file"""
        try:
            pefile.PE(file_path)
            return True
        except:
            return False

    def _check_suspicious_imports(self, pe):
        """Check for suspicious imports"""
        suspicious_imports = []
        suspicious_functions = [
            'CreateProcess', 'WriteProcessMemory', 'VirtualAlloc',
            'LoadLibrary', 'GetProcAddress', 'CreateRemoteThread',
            'ShellExecute', 'WinExec', 'CreateFile'
        ]
        
        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                for imp in entry.imports:
                    if imp.name and imp.name.decode() in suspicious_functions:
                        suspicious_imports.append(imp.name.decode())
        
        return suspicious_imports 